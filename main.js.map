{"version":3,"sources":["./src/environments/environment.ts","./src/app/sudoku/Utils/sudoku.ts","./src/app/sudoku/Utils/core.ts","./src/app/util/time.ts","./src/app/sudoku/sudoku.service.ts","./src/app/sudoku/Utils/model.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/sudoku/sudoku.ts","./src/app/sudoku/Utils/list.ts","./src/app/sudoku/Utils/index.ts","./src/app/app.module.ts","./src/app/util/utils-math.ts","./src/app/app-routing.module.ts","./src/app/sudoku/sudoku-grid/sudoku-grid.component.ts","./src/app/sudoku/sudoku-grid/sudoku-grid.component.html","./src/app/sudoku/sudoku.component.ts","./src/app/sudoku/sudoku.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import List from './list';\r\nimport {\r\n  Metadata\r\n} from './model';\r\nimport {\r\n  search,\r\n  initializeColumnLabels,\r\n  initializeCircularDoublyLinkedToroidaList\r\n} from './core';\r\n\r\nexport default class Sudoku {\r\n  static EMPTY = -1;\r\n  static VERTICAL = '|';\r\n  static HORIZONTAL = '------+-------+------';\r\n  static DOT = '.';\r\n  static SIZE = 9;\r\n  static BOX_SIZE = 3;\r\n\r\n  static fromString(input: string): number[][] {\r\n    const parsed = [...input].map(\r\n      i => i === Sudoku.DOT ? Sudoku.EMPTY : Number(i)\r\n    );\r\n    const size = Math.sqrt(parsed.length);\r\n    return List.chunk <number>(parsed, size);\r\n  }\r\n\r\n  static boardFrom(input: number[][]) {\r\n    const [FIRST, SECOND] = [3, 7];\r\n    const parsedRow = [...input].map((rows) => {\r\n      const c: (string | number)[] = [...rows].map(\r\n        i => (i === Sudoku.EMPTY || i === 0) ? Sudoku.DOT : i\r\n      );\r\n      c.splice(FIRST, 0, Sudoku.VERTICAL);\r\n      c.splice(SECOND, 0, Sudoku.VERTICAL);\r\n      return c.join(' ');\r\n    });\r\n    parsedRow.splice(FIRST, 0, Sudoku.HORIZONTAL);\r\n    parsedRow.splice(SECOND, 0, Sudoku.HORIZONTAL);\r\n    return parsedRow.join('\\n');\r\n  }\r\n\r\n  static print(label: string, input: number[][]) {\r\n    console.group(label);\r\n    console.log();\r\n    console.log(Sudoku.boardFrom(input));\r\n    console.log();\r\n    console.groupEnd();\r\n  }\r\n\r\n  static parseCells(input: number[][]): Metadata[] {\r\n    const size = input.length;\r\n    const constraintMatrix = [];\r\n    const onlyNumbers = (n: number): boolean => n !== Sudoku.EMPTY;\r\n\r\n    for (let row = 0; row < size; row += 1) {\r\n      // Values that are currently present in the row\r\n      const numbers = input[row].filter(onlyNumbers);\r\n      for (let column = 0; column < size; column += 1) {\r\n        const value = input[row][column];\r\n\r\n        // If the column is not yet filled, fill it with values that are not\r\n        // yet present in the column\r\n        if (value === Sudoku.EMPTY) {\r\n\r\n          // Value must be from 1 - 9\r\n          for (let value = 1; value <= size; value += 1) {\r\n            // Only insert numbers that are not yet present for that row\r\n            if (numbers.includes(value)) {\r\n              continue;\r\n            }\r\n            // Create the row matrix with the constraints applied.\r\n            // This will be a 9 x 9 x 4 matrix with 1 and 0s\r\n            const data = Sudoku.constraintMatrix(\r\n              size,\r\n              row,\r\n              column,\r\n              value\r\n            );\r\n            constraintMatrix.push({\r\n              row,\r\n              column,\r\n              value,\r\n              data\r\n            });\r\n          }\r\n          continue;\r\n        }\r\n        const data = Sudoku.constraintMatrix(size, row, column, value);\r\n        constraintMatrix.push({\r\n          row,\r\n          column,\r\n          value,\r\n          data\r\n        });\r\n      }\r\n    }\r\n    return constraintMatrix;\r\n  }\r\n\r\n  static solver(input: Metadata[]) {\r\n    const columns = initializeColumnLabels(Sudoku.SIZE * Sudoku.SIZE * 4);\r\n    const rootNode = initializeCircularDoublyLinkedToroidaList(input, columns);\r\n    return search(0, rootNode);\r\n  }\r\n\r\n  // Generator\r\n  static* solve(input: string) {\r\n    const solutions = [input]\r\n      .map(Sudoku.fromString)\r\n      .map(Sudoku.parseCells)\r\n      .map(Sudoku.solver);\r\n\r\n    const solution = solutions[0];\r\n\r\n    for (const solve of solution) {\r\n      for (const row of solve) {\r\n        yield row.metadata;\r\n      }\r\n    }\r\n  }\r\n\r\n  static constraints(\r\n    size: number,\r\n    row: number,\r\n    column: number,\r\n    value: number\r\n  ) {\r\n    const r = Math.floor(row / Sudoku.BOX_SIZE) * Sudoku.BOX_SIZE;\r\n    const c = Math.floor(column / Sudoku.BOX_SIZE);\r\n    return {\r\n      cell: row * size + column,\r\n      row: row * size + value - 1,\r\n      column: column * size + value - 1,\r\n      box: (r + c) * size + value - 1\r\n    };\r\n  }\r\n\r\n  static constraintMatrix(\r\n    size: number,\r\n    row: number,\r\n    column: number,\r\n    value: number\r\n  ): number[] {\r\n    const c = Sudoku.constraints(size, row, column, value);\r\n    const constraints = [\r\n      c.cell,\r\n      c.row,\r\n      c.column,\r\n      c.box\r\n    ];\r\n    const matrices = constraints.map(index => {\r\n      const arr = List.of(size * size, 0);\r\n      arr[index] = 1;\r\n      return arr;\r\n    });\r\n    return List.flatten <number>(matrices);\r\n  }\r\n\r\n  static toString(output: number[][]): string {\r\n    return output.map(rows =>\r\n      rows.map(i => i === Sudoku.EMPTY ? Sudoku.DOT : i).join('')\r\n    ).join('');\r\n  }\r\n}\r\n","import {\r\n  Metadata,\r\n  Node,\r\n  initializeRootNode,\r\n  initializeColumnNode,\r\n  initializeMetadata,\r\n  initializeNode,\r\n} from './model';\r\n\r\nconst ALPHABETS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\ntype ColumnLabels = string[];\r\n\r\n// initializeColumnLabels will create an array of labels from a given limit\r\nexport function initializeColumnLabels(n: number): ColumnLabels {\r\n  const labels = [...ALPHABETS];\r\n  return n < labels.length ?\r\n    labels.slice(0, n) :\r\n    Array(n).fill(0).map((_, i) => (i + 1).toString());\r\n}\r\n\r\nexport function initializeHeaderColumns(labels: ColumnLabels = []): Node {\r\n  const rootNode = initializeRootNode();\r\n  const currNode = labels.reduce((prev: Node, name: string) => {\r\n    const curr = initializeColumnNode(name);\r\n    curr.left = prev;\r\n    curr.left.right = curr;\r\n    return curr;\r\n  }, rootNode);\r\n  rootNode.left = currNode;\r\n  rootNode.left.right = rootNode;\r\n  return rootNode;\r\n}\r\n\r\nexport function initializeCircularDoublyLinkedToroidaList(\r\n  metadata: Metadata[],\r\n  columnLabels: ColumnLabels\r\n): Node {\r\n  // Setup header node\r\n  const rootNode = initializeHeaderColumns(columnLabels);\r\n  const dimension = (m: Metadata[]): [number, number] => [m.length, m[0].data.length];\r\n  const isOne = (n: number): boolean => n === 1;\r\n  const [maxRow, maxCol] = dimension(metadata);\r\n  const isLastRow = (row: number): boolean => row === maxRow - 1;\r\n  const isLastColumn = (col: number): boolean => col === maxCol - 1;\r\n\r\n  metadata.forEach((meta, row) => {\r\n    const metaData = initializeMetadata(meta.column, meta.row, meta.value, []);\r\n    const prevNodes: Node[] = [];\r\n\r\n    meta.data.forEach((value: number, column: number) => {\r\n      const name = columnLabels[column];\r\n      if (isOne(value)) {\r\n        const columnNode = traverseRight(rootNode, name);\r\n        columnNode.size += 1;\r\n        const node = initializeNode(columnNode, metaData);\r\n\r\n        // Bind to the previous node on the left\r\n        if (prevNodes.length > 0) {\r\n          const prevNode = prevNodes[prevNodes.length - 1];\r\n          node.left = prevNode;\r\n          node.left.right = node;\r\n        }\r\n\r\n        // Bind back to the top node\r\n        const bottomNode = traverseDown(columnNode);\r\n        node.up = bottomNode;\r\n        node.up.down = node;\r\n\r\n        prevNodes.push(node);\r\n      }\r\n\r\n      // Link top and bottom nodes together\r\n      if (isLastRow(row)) {\r\n        const lastNode = traverseRight(rootNode, name);\r\n        const bottomNode = traverseDown(lastNode);\r\n        bottomNode.down = bottomNode.columnNode;\r\n        bottomNode.down.up = bottomNode;\r\n      }\r\n\r\n      // Link left and right nodes together\r\n      if (isLastColumn(column) && prevNodes.length) {\r\n        const lastNode = prevNodes[prevNodes.length - 1];\r\n        const firstNode = prevNodes[0];\r\n        lastNode.right = firstNode;\r\n        lastNode.right.left = lastNode;\r\n      }\r\n    });\r\n  });\r\n  return rootNode;\r\n}\r\n\r\nexport function smallestColumnSize(\r\n  rootNode: Node,\r\n  size: number = Infinity\r\n): Node {\r\n  let c = rootNode.right;\r\n  for (let j = rootNode.right; j !== rootNode; j = j.right) {\r\n    if (j.size < size) {\r\n      size = j.size;\r\n      c = j;\r\n    }\r\n  }\r\n  return c;\r\n}\r\n\r\nexport function* search(\r\n  depth: number = 0,\r\n  rootNode: Node,\r\n  solution: Node[] = [],\r\n): IterableIterator<Node[]> {\r\n  // Termination condition\r\n  if (rootNode.right === rootNode) {\r\n    // Return a copy without pointing back to the reference,\r\n    // as the values might be replaced\r\n    console.log('[terminate]');\r\n    yield [...solution];\r\n  }\r\n  // Start with the smallest column node to minimize search\r\n  let c = smallestColumnSize(rootNode);\r\n  cover(c);\r\n  for (let r = c.down; r !== c; r = r.down) {\r\n    solution.push(r);\r\n    for (let j = r.right; j !== r; j = j.right) {\r\n      cover(j);\r\n    }\r\n    yield* search(depth + 1, rootNode, solution);\r\n\r\n    r = solution.pop() || r;\r\n    c = r.columnNode;\r\n    for (let j = r.left; j !== r; j = j.left) {\r\n      uncover(j);\r\n    }\r\n  }\r\n  uncover(c);\r\n}\r\n\r\nfunction cover(node: Node): void {\r\n  const columnNode = node.columnNode;\r\n  columnNode.right.left = columnNode.left;\r\n  columnNode.left.right = columnNode.right;\r\n\r\n  for (let i = columnNode.down; i !== columnNode; i = i.down) {\r\n    for (let j = i.right; j !== i; j = j.right) {\r\n      j.down.up = j.up;\r\n      j.up.down = j.down;\r\n      j.columnNode.size -= 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction uncover(node: Node): void {\r\n  const columnNode = node.columnNode;\r\n  for (let i = columnNode.up; i !== columnNode; i = i.up) {\r\n    for (let j = i.left; j !== i; j = j.left) {\r\n      j.columnNode.size += 1;\r\n      j.down.up = j;\r\n      j.up.down = j;\r\n    }\r\n  }\r\n  columnNode.right.left = columnNode;\r\n  columnNode.left.right = columnNode;\r\n}\r\n\r\nfunction traverseDown(rootNode: Node): Node {\r\n  let node = rootNode;\r\n  while (node && node.down && node.down !== node) {\r\n    node = node.down;\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction traverseRight(rootNode: Node, name: string): Node {\r\n  let node = rootNode;\r\n  while (node.name !== name && node.right !== node) {\r\n    node = node.right;\r\n  }\r\n  return node;\r\n}\r\n","export default function waitTime(duration: number):any {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(duration);\r\n    }, duration);\r\n  });\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {SudokuSolver} from '../util/sudoku-solver';\r\nimport {delay} from 'rxjs/operators';\r\nimport Sudoku from './Utils/sudoku';\r\nimport {generateFullSudoku, getSudoku, shuffleSudoku} from './Utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SudokuService {\r\n\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public getRandomSudoku(): number[][] {\r\n    // this.solveSudoku();\r\n    // this.foo();\r\n    return getSudoku();\r\n  }\r\n\r\n  private async solveSudoku(): Promise<void> {\r\n    /*const inputs = [\r\n      '.6.3..8.4537.9.....4...63.7.9..51238.........71362..4.3.64...1.....6.5231.2..9.8.',\r\n     // '.......12........3..23..4....18....5.6..7.8.......9.....85.....9...4.5..47...6...',\r\n      // In 2012, Finnish mathematician Arto Inkala claimed to have created the \"World's Hardest Sudoku\".\r\n     // '8..........36......7..9.2...5...7.......457.....1...3...1....68..85...1..9....4..'\r\n    ];*/\r\n    const input = '...........36......7..9.2...5...7.......457.....1...3...1....68..85...1..9....4..';\r\n    console.time('benchmark');\r\n    console.log('Benchmarking');\r\n    Sudoku.print(`INPUT ${1}:`, Sudoku.fromString(input));\r\n    let j = 0;\r\n    // Empty Array\r\n    const solution = Array(9).fill(() => Array(9).fill(0)).map(fn => fn());\r\n\r\n    for await (const data of Sudoku.solve(input)) {\r\n      const {\r\n        row,\r\n        column,\r\n        value\r\n      } = data;\r\n      solution[row][column] = value;\r\n      Sudoku.print(`OUTPUT ${+1} ITERATION=${j}:`, solution);\r\n\r\n      await delay(500);\r\n      j++;\r\n    }\r\n    console.timeEnd('benchmark');\r\n    await delay(1000);\r\n\r\n  }\r\n\r\n  private getSolutionCount(input: string): number {\r\n    const solution = Sudoku.solver(Sudoku.parseCells(Sudoku.fromString(input)));\r\n    return [...solution].length;\r\n  }\r\n\r\n\r\n  // tslint:disable-next-line:typedef\r\n  private foo() {\r\n    const input = '...........36......7..9.2...5...7.......457.....1...3...1....68..85...1..9....4..';\r\n    const solutions = Sudoku.solver(Sudoku.parseCells(Sudoku.fromString(input)));\r\n    for (const output of solutions) {\r\n      output.forEach(node => {\r\n        const results = [node.columnNode.name];\r\n        let right = node.right;\r\n        while (right !== node) {\r\n          results.push(right.columnNode.name);\r\n          right = right.right;\r\n        }\r\n        console.log(results.join(' '));\r\n      });\r\n      console.log();\r\n    }\r\n  }\r\n}\r\n","const ROOT = 'h';\r\n\r\n// Metadata holds additional information for a particular box\r\nexport interface Metadata {\r\n  column: number;\r\n  row: number;\r\n  value: number;\r\n  data: number[];\r\n}\r\n\r\nexport function initializeMetadata(\r\n  column: number,\r\n  row: number,\r\n  value: number,\r\n  data: number[]\r\n): Metadata {\r\n  return {row, column, value, data};\r\n}\r\n\r\nfunction nullMetadata(): Metadata {\r\n  return {row: 0, column: 0, value: -1, data: []};\r\n}\r\n\r\nexport class Node {\r\n  up: Node;\r\n  down: Node;\r\n  left: Node;\r\n  right: Node;\r\n  columnNode: Node;\r\n  name = '';\r\n  size = 0;\r\n  metadata: Metadata = nullMetadata();\r\n\r\n  constructor() {\r\n    this.columnNode = this.up = this.down = this.left = this.right = this;\r\n  }\r\n}\r\n\r\nexport function initializeNode(columnNode: Node, metadata: Metadata): Node {\r\n  const node = new Node();\r\n  node.columnNode = columnNode;\r\n  node.metadata = metadata;\r\n  return node;\r\n}\r\n\r\nexport function initializeColumnNode(name: string): Node {\r\n  const node = new Node();\r\n  node.name = name;\r\n  return node;\r\n}\r\n\r\nexport function initializeRootNode(): Node {\r\n  const node = new Node();\r\n  node.name = ROOT;\r\n  return node;\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'fabiastisch';\r\n}\r\n","<router-outlet></router-outlet>\r\n","import {delay} from 'rxjs/operators';\r\nimport List from './Utils/list';\r\nimport {Metadata} from './Utils/model';\r\nimport {initializeCircularDoublyLinkedToroidaList, initializeColumnLabels, search} from './Utils/core';\r\n\r\nexport class Sudoku {\r\n\r\n\r\n  constructor(array: number[][]) {\r\n    console.log('SudokuConstructor');\r\n    array.forEach(row => {\r\n      const rowData = [];\r\n      row.forEach(value => {\r\n        rowData.push(new Cell(value));\r\n      });\r\n      this.cells.push(rowData);\r\n    });\r\n  }\r\n\r\n  static EMPTY = -1;\r\n  static VERTICAL = '|';\r\n  static HORIZONTAL = '------+-------+------';\r\n  static DOT = '.';\r\n  static SIZE = 9;\r\n  static BOX_SIZE = 3;\r\n  cells: Cell[][] = [];\r\n\r\n  static fromString(input: string): number[][] {\r\n    const parsed = [...input].map(\r\n      i => i === Sudoku.DOT ? Sudoku.EMPTY : Number(i)\r\n    );\r\n    const size = Math.sqrt(parsed.length);\r\n    return List.chunk <number>(parsed, size);\r\n  }\r\n\r\n  static boardFrom(input: number[][]): string {\r\n    const [FIRST, SECOND] = [3, 7];\r\n    const parsedRow = [...input].map((rows) => {\r\n      const c: (string | number)[] = [...rows].map(\r\n        i => (i === Sudoku.EMPTY || i === 0) ? Sudoku.DOT : i\r\n      );\r\n      c.splice(FIRST, 0, Sudoku.VERTICAL);\r\n      c.splice(SECOND, 0, Sudoku.VERTICAL);\r\n      return c.join(' ');\r\n    });\r\n    parsedRow.splice(FIRST, 0, Sudoku.HORIZONTAL);\r\n    parsedRow.splice(SECOND, 0, Sudoku.HORIZONTAL);\r\n    return parsedRow.join('\\n');\r\n  }\r\n\r\n  static print(label: string, input: number[][]): void {\r\n    console.group(label);\r\n    console.log();\r\n    console.log(Sudoku.boardFrom(input));\r\n    console.log();\r\n    console.groupEnd();\r\n  }\r\n\r\n  static parseCells(input: number[][]): Metadata[] {\r\n    const size = input.length;\r\n    const constraintMatrix = [];\r\n    const onlyNumbers = (n: number): boolean => n !== Sudoku.EMPTY;\r\n\r\n    for (let row = 0; row < size; row += 1) {\r\n      // Values that are currently present in the row\r\n      const numbers = input[row].filter(onlyNumbers);\r\n      for (let column = 0; column < size; column += 1) {\r\n        const value = input[row][column];\r\n\r\n        // If the column is not yet filled, fill it with values that are not\r\n        // yet present in the column\r\n        if (value === Sudoku.EMPTY) {\r\n\r\n          // Value must be from 1 - 9\r\n          for (let value = 1; value <= size; value += 1) {\r\n            // Only insert numbers that are not yet present for that row\r\n            if (numbers.includes(value)) {\r\n              continue;\r\n            }\r\n            // Create the row matrix with the constraints applied.\r\n            // This will be a 9 x 9 x 4 matrix with 1 and 0s\r\n            const data = Sudoku.constraintMatrix(\r\n              size,\r\n              row,\r\n              column,\r\n              value\r\n            );\r\n            constraintMatrix.push({\r\n              row,\r\n              column,\r\n              value,\r\n              data\r\n            });\r\n          }\r\n          continue;\r\n        }\r\n        const data = Sudoku.constraintMatrix(size, row, column, value);\r\n        constraintMatrix.push({\r\n          row,\r\n          column,\r\n          value,\r\n          data\r\n        });\r\n      }\r\n    }\r\n    return constraintMatrix;\r\n  }\r\n\r\n  static solver(input: Metadata[]): any {\r\n    const columns = initializeColumnLabels(Sudoku.SIZE * Sudoku.SIZE * 4);\r\n    const rootNode = initializeCircularDoublyLinkedToroidaList(input, columns);\r\n    return search(0, rootNode);\r\n  }\r\n\r\n  // Generator\r\n  static* solve(input: string): any {\r\n    const solutions = [input]\r\n      .map(Sudoku.fromString)\r\n      .map(Sudoku.parseCells)\r\n      .map(Sudoku.solver);\r\n\r\n    const solution = solutions[0];\r\n\r\n    for (const solve of solution) {\r\n      for (const row of solve) {\r\n        yield row.metadata;\r\n      }\r\n    }\r\n  }\r\n\r\n  static constraints(\r\n    size: number,\r\n    row: number,\r\n    column: number,\r\n    value: number\r\n  ): any {\r\n    const r = Math.floor(row / Sudoku.BOX_SIZE) * Sudoku.BOX_SIZE;\r\n    const c = Math.floor(column / Sudoku.BOX_SIZE);\r\n    return {\r\n      cell: row * size + column,\r\n      row: row * size + value - 1,\r\n      column: column * size + value - 1,\r\n      box: (r + c) * size + value - 1\r\n    };\r\n  }\r\n\r\n  static constraintMatrix(\r\n    size: number,\r\n    row: number,\r\n    column: number,\r\n    value: number\r\n  ): number[] {\r\n    const c = Sudoku.constraints(size, row, column, value);\r\n    const constraints = [\r\n      c.cell,\r\n      c.row,\r\n      c.column,\r\n      c.box\r\n    ];\r\n    const matrices = constraints.map(index => {\r\n      const arr = List.of(size * size, 0);\r\n      arr[index] = 1;\r\n      return arr;\r\n    });\r\n    return List.flatten <number>(matrices);\r\n  }\r\n\r\n  static toString(output: number[][]): string {\r\n    return output.map(rows =>\r\n      rows.map(i => i === Sudoku.EMPTY ? Sudoku.DOT : i).join('')\r\n    ).join('');\r\n  }\r\n\r\n  public async solveCells(): Promise<any> {\r\n\r\n  }\r\n}\r\n\r\nexport class Cell {\r\n  value: number;\r\n  readonly: boolean;\r\n  notes: number[];\r\n  isActive = false;\r\n  highlightLight = false;\r\n  highlightHard = false;\r\n\r\n  constructor(value?: number) {\r\n    this.notes = [];\r\n    if (value !== null && value !== undefined && value !== -1) {\r\n      this.value = value;\r\n      this.readonly = true;\r\n    } else {\r\n      this.readonly = false;\r\n    }\r\n  }\r\n}\r\n","export default class List {\r\n  static chunk<T>(arr: T[], size: number): T[][] {\r\n    const out = [];\r\n    while (arr.length) {\r\n      out.push(arr.splice(0, size));\r\n    }\r\n    return out;\r\n  }\r\n\r\n  static flatten<T>(arr: T[][]): T[] {\r\n    return arr.reduce((a: T[], b: T[]) => a.concat(b), []);\r\n  }\r\n\r\n  static takeFirstOr<T>(arr: T[], def: T): T {\r\n    if (arr.length > 0) {\r\n      return arr[0];\r\n    }\r\n    return def;\r\n  }\r\n\r\n  static of<T>(size: number, value: T): T[] {\r\n    return Array(size).fill(value);\r\n  }\r\n\r\n  static grid<T>(size: number, value: T): T[][] {\r\n    return Array(size).fill([])\r\n      .map(() => Array(size).fill(value));\r\n  }\r\n}\r\n","import {arrayStartAtZero, getRandomInt, shuffleArray, transpose} from '../../util/utils-math';\r\nimport Sudoku from './sudoku';\r\n\r\nconst size = 9;\r\nconst boxSize = 3;\r\n\r\nexport function generateFullSudoku(): number[][] {\r\n  const numbers = Array.from({length: size}, (_, i) => i + 1);\r\n  let grid = '';\r\n  const first = [];\r\n  [...Array(size)].forEach(_ => {\r\n    const randomInt = getRandomInt(0, numbers.length - 1);\r\n    first.push(numbers[randomInt]);\r\n    numbers.splice(randomInt, 1);\r\n  });\r\n  grid += first.join('');\r\n  let row = 0;\r\n  [...Array(size - 1)].forEach(_ => {\r\n    row++;\r\n    if (row % boxSize === 0) {\r\n      const n = first.shift();\r\n      first.push(n);\r\n    }\r\n    [...Array(boxSize)].forEach(_ => {\r\n      const n = first.shift();\r\n      first.push(n);\r\n    });\r\n    grid += first.join('');\r\n\r\n  });\r\n  Sudoku.print(null, Sudoku.fromString(grid));\r\n\r\n\r\n  return Sudoku.fromString(grid);\r\n}\r\n\r\nexport function shuffleSudoku(fullSudoku: number[][], mode: number = 0): number[][] {\r\n\r\n  if (mode < 2) {\r\n\r\n    const newSudoku = [];\r\n    // shuffle rows\r\n    const numbers = Array.from({length: boxSize}, (_, i) => i);\r\n    let region = 0;\r\n    [...Array(boxSize)].forEach(((_, index) => {\r\n      shuffleArray(numbers).forEach(random => {\r\n        newSudoku.push(fullSudoku[random + region * boxSize]);\r\n      });\r\n      region++;\r\n    }));\r\n    // Sudoku.print('null', newSudoku);\r\n\r\n    // Shuffle Columns\r\n    return shuffleSudoku(transpose(newSudoku), ++mode);\r\n\r\n  } else {\r\n    return fullSudoku;\r\n  }\r\n}\r\n\r\nexport function getSudoku(): number[][] {\r\n  const fullSudoku = shuffleSudoku(generateFullSudoku());\r\n\r\n  shuffleArray(arrayStartAtZero(size)).forEach(col => {\r\n    shuffleArray(arrayStartAtZero(size)).forEach(row => {\r\n      const temp = fullSudoku[col][row];\r\n      fullSudoku[col][row] = -1;\r\n      if (getSolutionCount(fullSudoku) > 1) {\r\n        fullSudoku[col][row] = temp;\r\n        return;\r\n      }\r\n    });\r\n    if (getSolutionCount(fullSudoku) === 1) {\r\n      return;\r\n    }\r\n  });\r\n\r\n  return fullSudoku;\r\n}\r\n\r\nexport function getSolutionCount(grid: number[][]): number {\r\n  const solution = Sudoku.solver(Sudoku.parseCells(grid));\r\n  return [...solution].length;\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport {RouterModule} from '@angular/router';\r\nimport { SudokuComponent } from './sudoku/sudoku.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { SudokuGridComponent } from './sudoku/sudoku-grid/sudoku-grid.component';\r\nimport {FormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SudokuComponent,\r\n    SudokuGridComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    RouterModule,\r\n    AppRoutingModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export function getRandomInt(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:no-shadowed-variable\r\nexport const transpose = m => m[0].map((x, i) => m.map(x => x[i]));\r\n\r\n\r\nexport function shuffleArray(array: any[]): any[] {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const random = Math.floor(Math.random() * (i + 1));\r\n    const temp = array[i];\r\n    array[i] = array[random];\r\n    array[random] = temp;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function arrayStartAtZero(size: number): number[] {\r\n  return Array.from({length: size}, (_, i) => i);\r\n}\r\n\r\nexport function arrayStartAtOne(size: number): number[] {\r\n  return Array.from({length: size}, (_, i) => i + 1);\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {SudokuComponent} from './sudoku/sudoku.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: 'sudoku', component: SudokuComponent },\r\n  { path: '', pathMatch: 'full', redirectTo: '/sudoku' }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {ChangeDetectorRef, Component, HostListener, OnInit} from '@angular/core';\r\nimport {Cell, Sudoku} from '../sudoku';\r\nimport {SudokuService} from '../sudoku.service';\r\nimport waitTime from '../../util/time';\r\n\r\n@Component({\r\n  selector: 'app-sudoku-grid',\r\n  templateUrl: './sudoku-grid.component.html',\r\n  styleUrls: ['./sudoku-grid.component.scss']\r\n})\r\nexport class SudokuGridComponent implements OnInit {\r\n  public sudoku: Sudoku;\r\n  private selectedCell: Cell;\r\n  solvingSpeed: number;\r\n\r\n  constructor(private sudokuService: SudokuService, private changeDetectorRef: ChangeDetectorRef) {\r\n    this.newSudoku();\r\n    console.log(this.sudoku);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  public newSudoku(): void {\r\n    this.sudoku = new Sudoku(this.sudokuService.getRandomSudoku());\r\n  }\r\n\r\n  @HostListener('window:keydown', ['$event'])\r\n  private onKeyDown(event: KeyboardEvent): void {\r\n    const num = parseInt(event.key, 10);\r\n    if (this.selectedCell === undefined || this.selectedCell === null) {\r\n      return;\r\n    }\r\n    if (this.selectedCell.readonly) {\r\n      return;\r\n    }\r\n    this.selectedCell.value = num;\r\n  }\r\n\r\n  onClick(cell: Cell, rowI: number, colI: number): void {\r\n    this.sudoku.cells.forEach(row => row.forEach(cel => {\r\n      cel.isActive = false;\r\n      cel.highlightLight = false;\r\n      cel.highlightHard = false;\r\n    }));\r\n    cell.isActive = true;\r\n    this.sudoku.cells[rowI].forEach(c => {\r\n      if (c !== cell) {\r\n        c.highlightLight = true;\r\n      }\r\n    });\r\n    this.sudoku.cells.forEach(row => {\r\n      if (row[colI] !== cell) {\r\n        row[colI].highlightLight = true;\r\n      }\r\n    });\r\n    this.selectedCell = cell;\r\n  }\r\n\r\n\r\n  public async solve(): Promise<void> {\r\n    console.log('solve clicked');\r\n    // await this.sudoku.solveCells();\r\n    console.log(this.sudoku.cells.map((value => value.map(value1 => value1.value ? value1.value : -1))));\r\n    const string = Sudoku.toString(this.sudoku.cells.map((value => value.map(value1 => value1.value ? value1.value : -1))));\r\n    Sudoku.print('x', Sudoku.fromString(string));\r\n    for await(const data of Sudoku.solve(string)) {\r\n      const {\r\n        row,\r\n        column,\r\n        value\r\n      } = data;\r\n      this.sudoku.cells[row][column].value = value;\r\n      this.changeDetectorRef.detectChanges();\r\n      await waitTime(100);\r\n    }\r\n  }\r\n\r\n}\r\n","\r\n<div class=\"display\">\r\n  <div class=\"row\" *ngFor=\"let row of sudoku.cells; index as rowI\"\r\n       >\r\n\r\n    <div class=\"cell\" *ngFor=\"let cell of row; index as colI\"\r\n         [class.top]=\"rowI % 3 == 0\"\r\n         [class.bot]=\"rowI % 3 == 2\"\r\n         [class.left]=\"colI % 3 == 0\"\r\n         [class.right]=\"colI % 3 == 2\"\r\n         [class.active]= cell.isActive\r\n         [class.highlightLight] = cell.highlightLight\r\n         [class.highlightHard] = cell.highlightHard\r\n         [class.writeable] = !cell.readonly\r\n         (click)=\"onClick(cell, rowI, colI)\" >\r\n\r\n      <div class=\"value\">{{cell.value}}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"center\">\r\n  <button (click)=\"this.solve()\"> Solve </button>\r\n  <button (click)=\"this.newSudoku()\"> New Sudoku </button>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sudoku',\r\n  templateUrl: './sudoku.component.html',\r\n  styleUrls: ['./sudoku.component.scss']\r\n})\r\nexport class SudokuComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"center\">\r\n  <h1> Sudoku </h1>\r\n  <p> In development </p>\r\n  <p> !!!NOT WORKING!!! </p>\r\n  <p> Last update: 22:41 24.02.2021</p>\r\n</div>\r\n<app-sudoku-grid></app-sudoku-grid>\r\n\r\n\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}